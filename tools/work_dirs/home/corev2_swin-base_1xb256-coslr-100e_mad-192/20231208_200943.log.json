{"env_info": "sys.platform: linux\nPython: 3.8.0 (default, Nov  6 2019, 21:49:08) [GCC 7.3.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3080 Ti\nCUDA_HOME: /usr/local/cuda\nNVCC: Build cuda_11.4.r11.4/compiler.30300941_0\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0\nPyTorch: 1.8.1+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.1+cu111\nOpenCV: 4.6.0\nMMCV: 1.4.5\nMMCV Compiler: n/a\nMMCV CUDA Compiler: n/a\nMMSelfSup: 0.7.1+", "config": "model = dict(\n    type='CoRev2',\n    backbone=dict(\n        type='CoRev2SwinTransformer',\n        arch='B',\n        img_size=224,\n        stage_cfgs=dict(block_cfgs=dict(window_size=6))),\n    neck=dict(type='SimMIMNeck', in_channels=1024, encoder_stride=32),\n    head=dict(type='SimMIMHead', patch_size=4, encoder_in_channels=3),\n    base_momentum=0.99,\n    contra_weight=1.0,\n    mim_weight=1.0,\n    contra_neck=dict(\n        type='CoRev2ContraNeck',\n        in_channels=1024,\n        hid_channels=2048,\n        out_channels=256,\n        num_layers=2,\n        with_bias=False,\n        with_last_bn=True,\n        with_last_bn_affine=False,\n        with_last_bias=False,\n        with_avg_pool=False,\n        vit_backbone=False),\n    contra_head=dict(\n        type='CoRev2ContraHead',\n        predictor=dict(\n            type='NonLinearNeck',\n            in_channels=256,\n            hid_channels=4096,\n            out_channels=256,\n            num_layers=2,\n            with_bias=False,\n            with_last_bn=True,\n            with_last_bn_affine=False,\n            with_last_bias=False,\n            with_avg_pool=False),\n        temperature=0.2))\ndata_source = 'DefectData'\ndataset_type = 'ThreeViewDataset'\nimg_norm_cfg = dict(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\ntrain_pipeline = [\n    dict(type='RandomResizedCrop', size=192, scale=(0.2, 1.0)),\n    dict(\n        type='RandomAppliedTrans',\n        transforms=[\n            dict(\n                type='ColorJitter',\n                brightness=0.4,\n                contrast=0.4,\n                saturation=0.4,\n                hue=0.1)\n        ],\n        p=0.8),\n    dict(type='RandomGrayscale', p=0.2),\n    dict(type='GaussianBlur', sigma_min=0.1, sigma_max=2.0, p=0.5),\n    dict(type='RandomHorizontalFlip'),\n    dict(type='ToTensor'),\n    dict(\n        type='Normalize',\n        mean=[0.485, 0.456, 0.406],\n        std=[0.229, 0.224, 0.225])\n]\ntrain_rec_pipeline = [\n    dict(\n        type='RandomResizedCrop',\n        size=192,\n        scale=(0.67, 1.0),\n        ratio=(0.75, 1.3333333333333333)),\n    dict(type='RandomHorizontalFlip'),\n    dict(type='ToTensor'),\n    dict(\n        type='Normalize',\n        mean=[0.485, 0.456, 0.406],\n        std=[0.229, 0.224, 0.225]),\n    dict(\n        type='BlockwiseMaskGenerator',\n        input_size=192,\n        mask_patch_size=32,\n        model_patch_size=4,\n        mask_ratio=0.6)\n]\nprefetch = False\ndata = dict(\n    samples_per_gpu=16,\n    workers_per_gpu=12,\n    drop_last=True,\n    train=dict(\n        type='ThreeViewDataset',\n        data_source=dict(\n            type='DefectData',\n            data_prefix=\n            '/home/dataE/pycharmproject/why/mmselfsup_0.7.0/data/Defect/train',\n            ann_file=\n            '/home/dataE/pycharmproject/why/mmselfsup_0.7.0/data/Defect/meta/train.txt'\n        ),\n        num_views=[2, 1],\n        pipelines=[[{\n            'type': 'RandomResizedCrop',\n            'size': 192,\n            'scale': (0.2, 1.0)\n        }, {\n            'type':\n            'RandomAppliedTrans',\n            'transforms': [{\n                'type': 'ColorJitter',\n                'brightness': 0.4,\n                'contrast': 0.4,\n                'saturation': 0.4,\n                'hue': 0.1\n            }],\n            'p':\n            0.8\n        }, {\n            'type': 'RandomGrayscale',\n            'p': 0.2\n        }, {\n            'type': 'GaussianBlur',\n            'sigma_min': 0.1,\n            'sigma_max': 2.0,\n            'p': 0.5\n        }, {\n            'type': 'RandomHorizontalFlip'\n        }, {\n            'type': 'ToTensor'\n        }, {\n            'type': 'Normalize',\n            'mean': [0.485, 0.456, 0.406],\n            'std': [0.229, 0.224, 0.225]\n        }],\n                   [{\n                       'type': 'RandomResizedCrop',\n                       'size': 192,\n                       'scale': (0.67, 1.0),\n                       'ratio': (0.75, 1.3333333333333333)\n                   }, {\n                       'type': 'RandomHorizontalFlip'\n                   }, {\n                       'type': 'ToTensor'\n                   }, {\n                       'type': 'Normalize',\n                       'mean': [0.485, 0.456, 0.406],\n                       'std': [0.229, 0.224, 0.225]\n                   }, {\n                       'type': 'BlockwiseMaskGenerator',\n                       'input_size': 192,\n                       'mask_patch_size': 32,\n                       'model_patch_size': 4,\n                       'mask_ratio': 0.6\n                   }]],\n        prefetch=False))\noptimizer = dict(\n    type='AdamW',\n    lr=0.0008,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    eps=1e-08,\n    paramwise_options=dict(\n        norm=dict(weight_decay=0.0),\n        bias=dict(weight_decay=0.0),\n        absolute_pos_embed=dict(weight_decay=0.0),\n        relative_position_bias_table=dict(weight_decay=0.0)))\noptimizer_config = dict(grad_clip=dict(max_norm=5.0))\nlr_config = dict(\n    policy='CosineAnnealing',\n    min_lr=4e-05,\n    warmup='linear',\n    warmup_iters=10,\n    warmup_ratio=0.004999999999999999,\n    warmup_by_epoch=True,\n    by_epoch=False)\nrunner = dict(type='EpochBasedRunner', max_epochs=100)\ncheckpoint_config = dict(interval=1, max_keep_ckpts=3, out_dir='')\nlog_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\ncudnn_benchmark = True\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\npersistent_workers = True\nopencv_num_threads = 0\nmp_start_method = 'fork'\nfp16 = dict(loss_scale='dynamic')\nwork_dir = './work_dirs/home/corev2_swin-base_1xb256-coslr-100e_mad-192'\ngpu_ids = range(0, 1)\n", "seed": 1929025233, "exp_name": "corev2_swin-base_1xb256-coslr-100e_mad-192.py"}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 1e-05, "memory": 8095, "data_time": 0.0459, "loss_contra": 2.0781, "loss_rec": 0.9043, "loss": 2.9824, "grad_norm": 13.91467, "time": 0.37435}
